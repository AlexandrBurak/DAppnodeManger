Index: packages/admin-ui/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n  \"name\": \"@dappnode/admin-ui\",\n  \"version\": \"0.1.0\",\n  \"license\": \"GPL-3.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"start\": \"REACT_APP_API_TEST=true react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"TEST=true react-scripts test --env=jsdom --watchAll=false --transformIgnorePatterns \\\"node_modules/(?!@codemirror)/\\\"\",\n    \"test:watch\": \"TEST=true react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\",\n    \"analyze\": \"npx source-map-explorer build/static/js/main.*\",\n    \"lint\": \"eslint --ext ts,tsx,js,jsx --fix src\",\n    \"prettier\": \"prettier --write 'src/**/*.*'\",\n    \"pre-commit\": \"yarn lint && CI=true yarn test\",\n    \"mock\": \"REACT_APP_API_URL=http://localhost:5000 yarn start\",\n    \"server-mock\": \"PORT=5000 nodemon server-mock/index.ts\",\n    \"server-mock:check-types\": \"tsc --noEmit --project tsconfig.server-mock.json\",\n    \"mock-standalone\": \"REACT_APP_MOCK=true yarn start\",\n    \"mock-standalone:build\": \"REACT_APP_MOCK=true yarn build\",\n    \"dev\": \"nodemon --ignore \\\"*.json\\\" -e ts,tsx --watch src/ --exec \\\"yarn build\\\"\"\n  },\n  \"dependencies\": {\n    \"@dappnode/common\": \"^0.1.0\",\n    \"@dappnode/dappmanager\": \"^0.1.0\",\n    \"@dappnode/eventbus\": \"^0.1.0\",\n    \"@dappnode/types\": \"^0.1.28\",\n    \"@reduxjs/toolkit\": \"^1.3.5\",\n    \"@types/clipboard\": \"^2.0.7\",\n    \"@types/node\": \"^18.11.18\",\n    \"@types/qrcode.react\": \"^1.0.2\",\n    \"@types/react\": \"^18.2.14\",\n    \"@types/react-dom\": \"^18.2.6\",\n    \"@types/react-redux\": \"^7.1.25\",\n    \"@types/react-router-dom\": \"^5.3.3\",\n    \"@types/semver\": \"^7.3.13\",\n    \"@types/socket.io-client\": \"^3.0.0\",\n    \"@types/styled-components\": \"^5.1.26\",\n    \"ajv\": \"^6.10.2\",\n    \"bootstrap\": \"^4.3.1\",\n    \"clipboard\": \"^2.0.1\",\n    \"deepmerge\": \"^2.1.1\",\n    \"ethereum-blockies-base64\": \"^1.0.2\",\n    \"is-ipfs\": \"^8.0.1\",\n    \"lodash-es\": \"^4.17.21\",\n    \"mitt\": \"^2.1.0\",\n    \"pretty-bytes\": \"^5.3.0\",\n    \"qrcode.react\": \"^0.8.0\",\n    \"react\": \"^18.2.0\",\n    \"react-bootstrap\": \"^1.0.0-beta.5\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-icons\": \"^4.3.1\",\n    \"react-markdown\": \"^8.0.0\",\n    \"react-redux\": \"^7.2.0\",\n    \"react-router-dom\": \"^6.14.1\",\n    \"react-scripts\": \"^5.0.0\",\n    \"react-switch\": \"^5.0.1\",\n    \"react-toastify\": \"^4.1.0\",\n    \"redux\": \"^4.0.0\",\n    \"redux-thunk\": \"^2.3.0\",\n    \"sass\": \"^1.49.7\",\n    \"semver\": \"^7.3.8\",\n    \"socket.io-client\": \"^4.5.1\",\n    \"styled-components\": \"^4.2.0\",\n    \"swr\": \"^0.2.0\",\n    \"tweetnacl\": \"^1.0.1\",\n    \"tweetnacl-util\": \"^0.15.0\"\n  },\n  \"devDependencies\": {\n    \"@babel/plugin-proposal-private-property-in-object\": \"^7.21.11\",\n    \"@types/jest\": \"^24.9.1\",\n    \"nodemon\": \"^2.0.4\",\n    \"prettier\": \"^1.16.4\",\n    \"typescript\": \"^4.7.3\"\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  },\n  \"jest\": {\n    \"watchPathIgnorePatterns\": [\n      \"/node_modules\"\n    ]\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/packages/admin-ui/package.json b/packages/admin-ui/package.json
--- a/packages/admin-ui/package.json	(revision 9a92a978a2f5fac02995ddc77a3a72aeb3326a8c)
+++ b/packages/admin-ui/package.json	(date 1696279138385)
@@ -4,7 +4,7 @@
   "license": "GPL-3.0",
   "type": "module",
   "scripts": {
-    "start": "REACT_APP_API_TEST=true react-scripts start",
+    "start": "REACT_APP_API_TEST=false react-scripts start",
     "build": "react-scripts build",
     "test": "TEST=true react-scripts test --env=jsdom --watchAll=false --transformIgnorePatterns \"node_modules/(?!@codemirror)/\"",
     "test:watch": "TEST=true react-scripts test --env=jsdom",
@@ -13,7 +13,7 @@
     "lint": "eslint --ext ts,tsx,js,jsx --fix src",
     "prettier": "prettier --write 'src/**/*.*'",
     "pre-commit": "yarn lint && CI=true yarn test",
-    "mock": "REACT_APP_API_URL=http://localhost:5000 yarn start",
+    "mock": "REACT_APP_API_URL=http://172.33.1.7 yarn start",
     "server-mock": "PORT=5000 nodemon server-mock/index.ts",
     "server-mock:check-types": "tsc --noEmit --project tsconfig.server-mock.json",
     "mock-standalone": "REACT_APP_MOCK=true yarn start",
Index: packages/common/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n  \"name\": \"@dappnode/common\",\n  \"type\": \"module\",\n  \"version\": \"0.1.0\",\n  \"license\": \"GPL-3.0\",\n  \"main\": \"dist/index.js\",\n  \"typings\": \"dist/index.d.ts\",\n  \"exports\": {\n    \".\": {\n      \"import\": \"./dist/index.js\",\n      \"require\": \"./dist/index.js\"\n    },\n    \"./package.json\": \"./package.json\"\n  },\n  \"scripts\": {\n    \"build\": \"yarn run generate && tsc -p tsconfig.json\",\n    \"generate\": \"NODE_OPTIONS=--loader=ts-node/esm ts-node -P tsconfig.json ./src/validation/generateSchemas.ts tsconfig.json ./src/validation/schemas\",\n    \"dev\": \"tsc -w\",\n    \"lint\": \"eslint . --ext .ts --fix src\"\n  },\n  \"dependencies\": {\n    \"@dappnode/types\": \"^0.1.28\",\n    \"@types/node\": \"^18.11.18\",\n    \"lodash-es\": \"^4.17.21\"\n  },\n  \"devDependencies\": {\n    \"@types/lodash-es\": \"^4.17.6\",\n    \"@types/node\": \"^18.11.18\",\n    \"ajv\": \"6.10.2\",\n    \"ts-node\": \"^10.9.1\",\n    \"typescript\": \"^4.9.4\",\n    \"typescript-json-schema\": \"^0.55.0\"\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/packages/common/package.json b/packages/common/package.json
--- a/packages/common/package.json	(revision 9a92a978a2f5fac02995ddc77a3a72aeb3326a8c)
+++ b/packages/common/package.json	(date 1696276310805)
@@ -14,7 +14,7 @@
   },
   "scripts": {
     "build": "yarn run generate && tsc -p tsconfig.json",
-    "generate": "NODE_OPTIONS=--loader=ts-node/esm ts-node -P tsconfig.json ./src/validation/generateSchemas.ts tsconfig.json ./src/validation/schemas",
+    "generate": "ts-node -P tsconfig.json ./src/validation/generateSchemas.ts tsconfig.json ./src/validation/schemas",
     "dev": "tsc -w",
     "lint": "eslint . --ext .ts --fix src"
   },
Index: packages/admin-ui/src/api/auth.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { LoginStatusReturn } from \"@dappnode/common\";\nimport {\n  apiTestMode,\n  apiUrls,\n  ERROR_NOT_LOGGED_IN,\n  ERROR_NOT_LOGGED_IN_NO_COOKIE,\n  ERROR_NOT_REGISTERED\n} from \"../params\";\nimport { IApiAuth } from \"./interface\";\n\nexport const apiAuth: IApiAuth = {\n  async fetchLoginStatus() {\n    try {\n      const res = await fetchAuthPost<{}, LoginStatusReturn>(\n        apiUrls.loginStatus\n      );\n      return { status: \"logged-in\", username: res.username };\n    } catch (e) {\n      switch (e.message) {\n        case ERROR_NOT_REGISTERED:\n          return { status: \"not-registered\" };\n        case ERROR_NOT_LOGGED_IN:\n          return { status: \"not-logged-in\", noCookie: false };\n        case ERROR_NOT_LOGGED_IN_NO_COOKIE:\n          return { status: \"not-logged-in\", noCookie: true };\n        default:\n          return { status: \"error\", error: e };\n      }\n    }\n  },\n\n  async login(data) {\n    return await fetchAuthPost(apiUrls.login, data);\n  },\n\n  async logoutAndReload() {\n    await fetchAuthPost(apiUrls.logout);\n    window.location.reload();\n  },\n\n  async register(data) {\n    return await fetchAuthPost(apiUrls.register, data);\n  },\n\n  async changePass(data) {\n    return await fetchAuthPost(apiUrls.changePass, data);\n  },\n\n  async recoverPass(data) {\n    return await fetchAuthPost(apiUrls.recoverPass, data);\n  }\n};\n\n// Utils\n////////\n\nasync function fetchAuthPost<T, R>(url: string, data?: T): Promise<R> {\n  const res = await fetch(url, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(data || {}),\n    credentials: apiTestMode ? \"include\" : undefined\n  });\n  return await parseResponse(res);\n}\n\ninterface ResponseBody {\n  error?: {\n    message: string;\n  };\n}\n\nasync function parseBodyErrorMessage(res: Response): Promise<string> {\n  const bodyText = await res.text();\n  try {\n    const body: ResponseBody = JSON.parse(bodyText);\n    if (body.error?.message) {\n      return body.error?.message;\n    } else if (typeof body.error === \"string\") {\n      return body.error;\n    } else {\n      return bodyText;\n    }\n  } catch (e) {\n    return bodyText;\n  }\n}\n\nasync function parseBodyResult<T>(res: Response): Promise<T> {\n  const bodyText = await res.text();\n  try {\n    return JSON.parse(bodyText);\n  } catch (e) {\n    throw Error(`Error parsing body: ${e.message}\\n${bodyText}`);\n  }\n}\n\nasync function parseResponse<T>(res: Response): Promise<T> {\n  if (res.ok) {\n    return await parseBodyResult(res);\n  } else {\n    // Try to parse error message in body\n    const bodyErrorMessage = await parseBodyErrorMessage(res);\n    throw Error(bodyErrorMessage || res.statusText);\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/packages/admin-ui/src/api/auth.ts b/packages/admin-ui/src/api/auth.ts
--- a/packages/admin-ui/src/api/auth.ts	(revision 9a92a978a2f5fac02995ddc77a3a72aeb3326a8c)
+++ b/packages/admin-ui/src/api/auth.ts	(date 1696274905369)
@@ -55,12 +55,16 @@
 ////////
 
 async function fetchAuthPost<T, R>(url: string, data?: T): Promise<R> {
+  console.log(url)
+  console.log(data)
+  console.log(apiTestMode)
   const res = await fetch(url, {
     method: "POST",
     headers: { "Content-Type": "application/json" },
     body: JSON.stringify(data || {}),
     credentials: apiTestMode ? "include" : undefined
   });
+  console.log(res)
   return await parseResponse(res);
 }
 
